# Bungee.py# Model of the movement of a bungee jumper  import mathdef Bungee(DT = 0.001, simLength = 30):    numIterations = int(simLength/DT) + 1    velocity = 0    mass = 80    acceleration_due_to_gravity = 9.81    weight = mass * acceleration_due_to_gravity    spring_constant = 4    unweighted_length = 30    weight_displacement = weight / spring_constant    projected_area = 0.1    length = 0        if (length > unweighted_length):        restoring_spring_force = -spring_constant * (length - unweighted_length)    else:        restoring_spring_force = 0    air_friction = -0.65 * projected_area * velocity * abs(velocity)    total_force = weight + restoring_spring_force + air_friction    acceleration = total_force / mass##À€#    print "t\tlength\tvelocity"    change_in_velocity = acceleration    change_in_length = velocity    t = 0    timeLst = [0]    velocityLst = [velocity]    lengthLst = [length]###    print '%10.2f\t%12.2f\t%12.2f' % (t, length, velocity)    for i in range(1, numIterations):        t = i * DT        timeLst.append(t)	            velocity = velocity + (change_in_velocity) * DT        velocityLst.append(velocity)	            length = length + (change_in_length) * DT        lengthLst.append(length)	            if (length > unweighted_length):            restoring_spring_force = -spring_constant * (length - unweighted_length)        else:            restoring_spring_force = 0        air_friction = -0.65 * projected_area * velocity * abs(velocity)        total_force = weight + restoring_spring_force + air_friction        acceleration = total_force / mass        change_in_length = velocity        change_in_velocity = acceleration#        print '%10.2f\t%12.2f\t%12.2f' % (t, length, velocity)    outfile = open("bungee.dat", 'w')    for i in range(numIterations):        outfile.write("%6.3f\t%6.2f\t%6.2f\n" % (timeLst[i], lengthLst[i], velocityLst[i]))    outfile.close()    Bungee()