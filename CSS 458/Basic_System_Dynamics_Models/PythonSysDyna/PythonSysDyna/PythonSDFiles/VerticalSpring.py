# VerticalSpring.py# Model of the movement of a vertical spring  import mathdef VerticalSpring(DT = 0.001, simLength = 3):    numIterations = int(simLength/DT) + 1    velocity = 0    mass = 0.2    acceleration_due_to_gravity = 9.81    weight = mass * acceleration_due_to_gravity    spring_constant = 10    unweighted_length = 1    weight_displacement = weight / spring_constant    displacement = 0.3    length = unweighted_length + weight_displacement + displacement    restoring_spring_force = -spring_constant * (length - unweighted_length)    total_force = weight + restoring_spring_force    acceleration = total_force / mass#    print "t\tlength\tvelocity"    change_in_velocity = acceleration            change_in_length = velocity    t = 0    timeLst = [0]    velocityLst = [velocity]    lengthLst = [length]#    print '%10.2f\t%12.2f\t%12.2f' % (t, length, velocity)    for i in range(1, numIterations):        t = i * DT        timeLst.append(t)	            velocity = velocity + (change_in_velocity) * DT        velocityLst.append(velocity)	            length = length + (change_in_length) * DT        lengthLst.append(length)	            restoring_spring_force = -spring_constant * (length - unweighted_length)        total_force = weight + restoring_spring_force        acceleration = total_force / mass        change_in_length = velocity        change_in_velocity = acceleration#        print '%10.2f\t%12.2f\t%12.2f' % (t, length, velocity)    outfile = open("verticalspring.dat", 'w')    for i in range(numIterations):        outfile.write("%6.3f\t%6.2f\t%6.2f\n" % (timeLst[i], lengthLst[i], velocityLst[i]))    outfile.close()    VerticalSpring()